"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__matrix__ = __matrix__;

function __matrix__(zero, one, mul, add) {
  /**
   * @param {nth} n > 0
   */
  var matrix = function matrix(n) {
    // We can compute simultaneously,
    //
    //       a   =      b
    //       b   =  a + b
    //
    // Using matrix multiplication,
    //
    //       X        M
    //       :        :
    //     | a |   | 0 1 |
    //     | b | . | 1 1 |
    //
    // With this we can compute F_{n-1} and F_n using matrix exponentiation
    //
    //                                    n
    //     | F_{n-1} |     | 0 |   | 0 1 |
    //     |   F_n   |  =  | 1 | . | 1 1 |
    //
    // Matrix exponentiation can be achieved in log n steps using the
    // binary decomposition of n
    //
    //     n = ( n % 2 ) * 1 + ( ( n >> 1 ) % 2 ) * 2 + ... + ( ( n >> i ) % 2 ) * ( i + 1 ) + ...
    //
    // And computing M raised to successive powers of 2,
    //
    //                               2
    //            n     /     (n//2) \           (n%2)
    //     | 0 1 |     |  | 0 1 |     |      | 0 1 |
    //     | 1 1 |  =   \ | 1 1 |    /   .   | 1 1 |
    //
    // The matrix is encoded as
    //
    //     | t u |
    //     | v w |
    var a, b, t, u, v, w, a2, b2, t2, u2, v2, w2;
    a = zero();
    b = one();
    t = zero();
    u = one();
    v = one();
    w = one();

    while (true) {
      if (n % 2 === 1) {
        a2 = add(mul(a, t), mul(b, u));
        b2 = add(mul(a, v), mul(b, w));
        a = a2;
        b = b2;
        if (n === 1) break;
      }

      t2 = add(mul(t, t), mul(u, v));
      u2 = add(mul(t, u), mul(u, w));
      v2 = add(mul(v, t), mul(w, v));
      w2 = add(mul(v, u), mul(w, w));
      t = t2;
      u = u2;
      v = v2;
      w = w2;
      n >>>= 1;
    }

    return [a, b];
  };

  return matrix;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRyaXguanMiXSwibmFtZXMiOlsiX19tYXRyaXhfXyIsInplcm8iLCJvbmUiLCJtdWwiLCJhZGQiLCJtYXRyaXgiLCJuIiwiYSIsImIiLCJ0IiwidSIsInYiLCJ3IiwiYTIiLCJiMiIsInQyIiwidTIiLCJ2MiIsIncyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ08sU0FBU0EsVUFBVCxDQUFzQkMsSUFBdEIsRUFBNkJDLEdBQTdCLEVBQW1DQyxHQUFuQyxFQUF5Q0MsR0FBekMsRUFBK0M7QUFDckQ7OztBQUdBLE1BQUlDLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVdDLENBQVgsRUFBZTtBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLFFBQUlDLENBQUosRUFBUUMsQ0FBUixFQUFZQyxDQUFaLEVBQWdCQyxDQUFoQixFQUFvQkMsQ0FBcEIsRUFBd0JDLENBQXhCLEVBQTRCQyxFQUE1QixFQUFpQ0MsRUFBakMsRUFBc0NDLEVBQXRDLEVBQTJDQyxFQUEzQyxFQUFnREMsRUFBaEQsRUFBcURDLEVBQXJEO0FBRUFYLElBQUFBLENBQUMsR0FBR04sSUFBSSxFQUFSO0FBQWNPLElBQUFBLENBQUMsR0FBR04sR0FBRyxFQUFQO0FBQ2RPLElBQUFBLENBQUMsR0FBR1IsSUFBSSxFQUFSO0FBQWNTLElBQUFBLENBQUMsR0FBR1IsR0FBRyxFQUFQO0FBQWFTLElBQUFBLENBQUMsR0FBR1QsR0FBRyxFQUFQO0FBQWFVLElBQUFBLENBQUMsR0FBR1YsR0FBRyxFQUFQOztBQUV4QyxXQUFRLElBQVIsRUFBZTtBQUVkLFVBQUtJLENBQUMsR0FBRyxDQUFKLEtBQVUsQ0FBZixFQUFtQjtBQUVsQk8sUUFBQUEsRUFBRSxHQUFHVCxHQUFHLENBQUVELEdBQUcsQ0FBRUksQ0FBRixFQUFNRSxDQUFOLENBQUwsRUFBaUJOLEdBQUcsQ0FBRUssQ0FBRixFQUFNRSxDQUFOLENBQXBCLENBQVI7QUFDQUksUUFBQUEsRUFBRSxHQUFHVixHQUFHLENBQUVELEdBQUcsQ0FBRUksQ0FBRixFQUFNSSxDQUFOLENBQUwsRUFBaUJSLEdBQUcsQ0FBRUssQ0FBRixFQUFNSSxDQUFOLENBQXBCLENBQVI7QUFFQUwsUUFBQUEsQ0FBQyxHQUFHTSxFQUFKO0FBQVNMLFFBQUFBLENBQUMsR0FBR00sRUFBSjtBQUVULFlBQUtSLENBQUMsS0FBSyxDQUFYLEVBQWU7QUFFZjs7QUFHRFMsTUFBQUEsRUFBRSxHQUFHWCxHQUFHLENBQUVELEdBQUcsQ0FBRU0sQ0FBRixFQUFNQSxDQUFOLENBQUwsRUFBaUJOLEdBQUcsQ0FBRU8sQ0FBRixFQUFNQyxDQUFOLENBQXBCLENBQVI7QUFDQUssTUFBQUEsRUFBRSxHQUFHWixHQUFHLENBQUVELEdBQUcsQ0FBRU0sQ0FBRixFQUFNQyxDQUFOLENBQUwsRUFBaUJQLEdBQUcsQ0FBRU8sQ0FBRixFQUFNRSxDQUFOLENBQXBCLENBQVI7QUFDQUssTUFBQUEsRUFBRSxHQUFHYixHQUFHLENBQUVELEdBQUcsQ0FBRVEsQ0FBRixFQUFNRixDQUFOLENBQUwsRUFBaUJOLEdBQUcsQ0FBRVMsQ0FBRixFQUFNRCxDQUFOLENBQXBCLENBQVI7QUFDQU8sTUFBQUEsRUFBRSxHQUFHZCxHQUFHLENBQUVELEdBQUcsQ0FBRVEsQ0FBRixFQUFNRCxDQUFOLENBQUwsRUFBaUJQLEdBQUcsQ0FBRVMsQ0FBRixFQUFNQSxDQUFOLENBQXBCLENBQVI7QUFFQUgsTUFBQUEsQ0FBQyxHQUFHTSxFQUFKO0FBQVNMLE1BQUFBLENBQUMsR0FBR00sRUFBSjtBQUFTTCxNQUFBQSxDQUFDLEdBQUdNLEVBQUo7QUFBU0wsTUFBQUEsQ0FBQyxHQUFHTSxFQUFKO0FBRTNCWixNQUFBQSxDQUFDLE1BQU0sQ0FBUDtBQUVBOztBQUVELFdBQU8sQ0FBRUMsQ0FBRixFQUFNQyxDQUFOLENBQVA7QUFFQSxHQXJFRDs7QUF1RUEsU0FBT0gsTUFBUDtBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZnVuY3Rpb24gX19tYXRyaXhfXyAoIHplcm8gLCBvbmUgLCBtdWwgLCBhZGQgKSB7XG5cdC8qKlxuXHQgKiBAcGFyYW0ge250aH0gbiA+IDBcblx0ICovXG5cdHZhciBtYXRyaXggPSBmdW5jdGlvbiAoIG4gKSB7XG5cblx0XHQvLyBXZSBjYW4gY29tcHV0ZSBzaW11bHRhbmVvdXNseSxcblx0XHQvL1xuXHRcdC8vICAgICAgIGEgICA9ICAgICAgYlxuXHRcdC8vICAgICAgIGIgICA9ICBhICsgYlxuXHRcdC8vXG5cdFx0Ly8gVXNpbmcgbWF0cml4IG11bHRpcGxpY2F0aW9uLFxuXHRcdC8vXG5cdFx0Ly8gICAgICAgWCAgICAgICAgTVxuXHRcdC8vICAgICAgIDogICAgICAgIDpcblx0XHQvLyAgICAgfCBhIHwgICB8IDAgMSB8XG5cdFx0Ly8gICAgIHwgYiB8IC4gfCAxIDEgfFxuXHRcdC8vXG5cdFx0Ly8gV2l0aCB0aGlzIHdlIGNhbiBjb21wdXRlIEZfe24tMX0gYW5kIEZfbiB1c2luZyBtYXRyaXggZXhwb25lbnRpYXRpb25cblx0XHQvL1xuXHRcdC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgblxuXHRcdC8vICAgICB8IEZfe24tMX0gfCAgICAgfCAwIHwgICB8IDAgMSB8XG5cdFx0Ly8gICAgIHwgICBGX24gICB8ICA9ICB8IDEgfCAuIHwgMSAxIHxcblx0XHQvL1xuXHRcdC8vIE1hdHJpeCBleHBvbmVudGlhdGlvbiBjYW4gYmUgYWNoaWV2ZWQgaW4gbG9nIG4gc3RlcHMgdXNpbmcgdGhlXG5cdFx0Ly8gYmluYXJ5IGRlY29tcG9zaXRpb24gb2YgblxuXHRcdC8vXG5cdFx0Ly8gICAgIG4gPSAoIG4gJSAyICkgKiAxICsgKCAoIG4gPj4gMSApICUgMiApICogMiArIC4uLiArICggKCBuID4+IGkgKSAlIDIgKSAqICggaSArIDEgKSArIC4uLlxuXHRcdC8vXG5cdFx0Ly8gQW5kIGNvbXB1dGluZyBNIHJhaXNlZCB0byBzdWNjZXNzaXZlIHBvd2VycyBvZiAyLFxuXHRcdC8vXG5cdFx0Ly8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMlxuXHRcdC8vICAgICAgICAgICAgbiAgICAgLyAgICAgKG4vLzIpIFxcICAgICAgICAgICAobiUyKVxuXHRcdC8vICAgICB8IDAgMSB8ICAgICB8ICB8IDAgMSB8ICAgICB8ICAgICAgfCAwIDEgfFxuXHRcdC8vICAgICB8IDEgMSB8ICA9ICAgXFwgfCAxIDEgfCAgICAvICAgLiAgIHwgMSAxIHxcblx0XHQvL1xuXHRcdC8vIFRoZSBtYXRyaXggaXMgZW5jb2RlZCBhc1xuXHRcdC8vXG5cdFx0Ly8gICAgIHwgdCB1IHxcblx0XHQvLyAgICAgfCB2IHcgfFxuXG5cdFx0dmFyIGEgLCBiICwgdCAsIHUgLCB2ICwgdyAsIGEyICwgYjIgLCB0MiAsIHUyICwgdjIgLCB3MiA7XG5cblx0XHRhID0gemVybyggKSA7IGIgPSBvbmUoICkgO1xuXHRcdHQgPSB6ZXJvKCApIDsgdSA9IG9uZSggKSA7IHYgPSBvbmUoICkgOyB3ID0gb25lKCApIDtcblxuXHRcdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCBuICUgMiA9PT0gMSApIHtcblxuXHRcdFx0XHRhMiA9IGFkZCggbXVsKCBhICwgdCApICwgbXVsKCBiICwgdSApICkgO1xuXHRcdFx0XHRiMiA9IGFkZCggbXVsKCBhICwgdiApICwgbXVsKCBiICwgdyApICkgO1xuXG5cdFx0XHRcdGEgPSBhMiA7IGIgPSBiMiA7XG5cblx0XHRcdFx0aWYgKCBuID09PSAxICkgYnJlYWsgO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0dDIgPSBhZGQoIG11bCggdCAsIHQgKSAsIG11bCggdSAsIHYgKSApIDtcblx0XHRcdHUyID0gYWRkKCBtdWwoIHQgLCB1ICkgLCBtdWwoIHUgLCB3ICkgKSA7XG5cdFx0XHR2MiA9IGFkZCggbXVsKCB2ICwgdCApICwgbXVsKCB3ICwgdiApICkgO1xuXHRcdFx0dzIgPSBhZGQoIG11bCggdiAsIHUgKSAsIG11bCggdyAsIHcgKSApIDtcblxuXHRcdFx0dCA9IHQyIDsgdSA9IHUyIDsgdiA9IHYyIDsgdyA9IHcyIDtcblxuXHRcdFx0biA+Pj49IDEgO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFsgYSAsIGIgXSA7XG5cblx0fSA7XG5cblx0cmV0dXJuIG1hdHJpeCA7XG5cbn1cblxuIl19