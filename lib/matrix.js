"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.__matrix__ = __matrix__;
function __matrix__(zero, one, mul, add) {
	/**
  * @param {nth} n > 0
  */
	var matrix = function matrix(n) {

		// We can compute simultaneously,
		//
		//       a   =      b
		//       b   =  a + b
		//
		// Using matrix multiplication,
		//
		//       X        M
		//       :        :
		//     | a |   | 0 1 |
		//     | b | . | 1 1 |
		//
		// With this we can compute F_{n-1} and F_n using matrix exponentiation
		//
		//                                    n
		//     | F_{n-1} |     | 0 |   | 0 1 |
		//     |   F_n   |  =  | 1 | . | 1 1 |
		//
		// Matrix exponentiation can be achieved in log n steps using the
		// binary decomposition of n
		//
		//     n = ( n % 2 ) * 1 + ( ( n >> 1 ) % 2 ) * 2 + ... + ( ( n >> i ) % 2 ) * ( i + 1 ) + ...
		//
		// And computing M raised to successive powers of 2,
		//
		//                               2
		//            n     /     (n//2) \           (n%2)
		//     | 0 1 |     |  | 0 1 |     |      | 0 1 |
		//     | 1 1 |  =   \ | 1 1 |    /   .   | 1 1 |
		//
		// The matrix is encoded as
		//
		//     | t u |
		//     | v w |

		var a, b, t, u, v, w, a2, b2, t2, u2, v2, w2;

		a = zero();b = one();
		t = zero();u = one();v = one();w = one();

		while (true) {

			if (n % 2 === 1) {

				a2 = add(mul(a, t), mul(b, u));
				b2 = add(mul(a, v), mul(b, w));

				a = a2;b = b2;

				if (n === 1) break;
			}

			t2 = add(mul(t, t), mul(u, v));
			u2 = add(mul(t, u), mul(u, w));
			v2 = add(mul(v, t), mul(w, v));
			w2 = add(mul(v, u), mul(w, w));

			t = t2;u = u2;v = v2;w = w2;

			n >>>= 1;
		}

		return [a, b];
	};

	return matrix;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRyaXguanMiXSwibmFtZXMiOlsiX19tYXRyaXhfXyIsInplcm8iLCJvbmUiLCJtdWwiLCJhZGQiLCJtYXRyaXgiLCJuIiwiYSIsImIiLCJ0IiwidSIsInYiLCJ3IiwiYTIiLCJiMiIsInQyIiwidTIiLCJ2MiIsIncyIl0sIm1hcHBpbmdzIjoiOzs7OztRQUNnQkEsVSxHQUFBQSxVO0FBQVQsU0FBU0EsVUFBVCxDQUFzQkMsSUFBdEIsRUFBNkJDLEdBQTdCLEVBQW1DQyxHQUFuQyxFQUF5Q0MsR0FBekMsRUFBK0M7QUFDckQ7OztBQUdBLEtBQUlDLFNBQVMsU0FBVEEsTUFBUyxDQUFXQyxDQUFYLEVBQWU7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQUlDLENBQUosRUFBUUMsQ0FBUixFQUFZQyxDQUFaLEVBQWdCQyxDQUFoQixFQUFvQkMsQ0FBcEIsRUFBd0JDLENBQXhCLEVBQTRCQyxFQUE1QixFQUFpQ0MsRUFBakMsRUFBc0NDLEVBQXRDLEVBQTJDQyxFQUEzQyxFQUFnREMsRUFBaEQsRUFBcURDLEVBQXJEOztBQUVBWCxNQUFJTixNQUFKLENBQWNPLElBQUlOLEtBQUo7QUFDZE8sTUFBSVIsTUFBSixDQUFjUyxJQUFJUixLQUFKLENBQWFTLElBQUlULEtBQUosQ0FBYVUsSUFBSVYsS0FBSjs7QUFFeEMsU0FBUSxJQUFSLEVBQWU7O0FBRWQsT0FBS0ksSUFBSSxDQUFKLEtBQVUsQ0FBZixFQUFtQjs7QUFFbEJPLFNBQUtULElBQUtELElBQUtJLENBQUwsRUFBU0UsQ0FBVCxDQUFMLEVBQW9CTixJQUFLSyxDQUFMLEVBQVNFLENBQVQsQ0FBcEIsQ0FBTDtBQUNBSSxTQUFLVixJQUFLRCxJQUFLSSxDQUFMLEVBQVNJLENBQVQsQ0FBTCxFQUFvQlIsSUFBS0ssQ0FBTCxFQUFTSSxDQUFULENBQXBCLENBQUw7O0FBRUFMLFFBQUlNLEVBQUosQ0FBU0wsSUFBSU0sRUFBSjs7QUFFVCxRQUFLUixNQUFNLENBQVgsRUFBZTtBQUVmOztBQUdEUyxRQUFLWCxJQUFLRCxJQUFLTSxDQUFMLEVBQVNBLENBQVQsQ0FBTCxFQUFvQk4sSUFBS08sQ0FBTCxFQUFTQyxDQUFULENBQXBCLENBQUw7QUFDQUssUUFBS1osSUFBS0QsSUFBS00sQ0FBTCxFQUFTQyxDQUFULENBQUwsRUFBb0JQLElBQUtPLENBQUwsRUFBU0UsQ0FBVCxDQUFwQixDQUFMO0FBQ0FLLFFBQUtiLElBQUtELElBQUtRLENBQUwsRUFBU0YsQ0FBVCxDQUFMLEVBQW9CTixJQUFLUyxDQUFMLEVBQVNELENBQVQsQ0FBcEIsQ0FBTDtBQUNBTyxRQUFLZCxJQUFLRCxJQUFLUSxDQUFMLEVBQVNELENBQVQsQ0FBTCxFQUFvQlAsSUFBS1MsQ0FBTCxFQUFTQSxDQUFULENBQXBCLENBQUw7O0FBRUFILE9BQUlNLEVBQUosQ0FBU0wsSUFBSU0sRUFBSixDQUFTTCxJQUFJTSxFQUFKLENBQVNMLElBQUlNLEVBQUo7O0FBRTNCWixVQUFPLENBQVA7QUFFQTs7QUFFRCxTQUFPLENBQUVDLENBQUYsRUFBTUMsQ0FBTixDQUFQO0FBRUEsRUFyRUQ7O0FBdUVBLFFBQU9ILE1BQVA7QUFFQSIsImZpbGUiOiJtYXRyaXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBmdW5jdGlvbiBfX21hdHJpeF9fICggemVybyAsIG9uZSAsIG11bCAsIGFkZCApIHtcblx0LyoqXG5cdCAqIEBwYXJhbSB7bnRofSBuID4gMFxuXHQgKi9cblx0dmFyIG1hdHJpeCA9IGZ1bmN0aW9uICggbiApIHtcblxuXHRcdC8vIFdlIGNhbiBjb21wdXRlIHNpbXVsdGFuZW91c2x5LFxuXHRcdC8vXG5cdFx0Ly8gICAgICAgYSAgID0gICAgICBiXG5cdFx0Ly8gICAgICAgYiAgID0gIGEgKyBiXG5cdFx0Ly9cblx0XHQvLyBVc2luZyBtYXRyaXggbXVsdGlwbGljYXRpb24sXG5cdFx0Ly9cblx0XHQvLyAgICAgICBYICAgICAgICBNXG5cdFx0Ly8gICAgICAgOiAgICAgICAgOlxuXHRcdC8vICAgICB8IGEgfCAgIHwgMCAxIHxcblx0XHQvLyAgICAgfCBiIHwgLiB8IDEgMSB8XG5cdFx0Ly9cblx0XHQvLyBXaXRoIHRoaXMgd2UgY2FuIGNvbXB1dGUgRl97bi0xfSBhbmQgRl9uIHVzaW5nIG1hdHJpeCBleHBvbmVudGlhdGlvblxuXHRcdC8vXG5cdFx0Ly8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuXG5cdFx0Ly8gICAgIHwgRl97bi0xfSB8ICAgICB8IDAgfCAgIHwgMCAxIHxcblx0XHQvLyAgICAgfCAgIEZfbiAgIHwgID0gIHwgMSB8IC4gfCAxIDEgfFxuXHRcdC8vXG5cdFx0Ly8gTWF0cml4IGV4cG9uZW50aWF0aW9uIGNhbiBiZSBhY2hpZXZlZCBpbiBsb2cgbiBzdGVwcyB1c2luZyB0aGVcblx0XHQvLyBiaW5hcnkgZGVjb21wb3NpdGlvbiBvZiBuXG5cdFx0Ly9cblx0XHQvLyAgICAgbiA9ICggbiAlIDIgKSAqIDEgKyAoICggbiA+PiAxICkgJSAyICkgKiAyICsgLi4uICsgKCAoIG4gPj4gaSApICUgMiApICogKCBpICsgMSApICsgLi4uXG5cdFx0Ly9cblx0XHQvLyBBbmQgY29tcHV0aW5nIE0gcmFpc2VkIHRvIHN1Y2Nlc3NpdmUgcG93ZXJzIG9mIDIsXG5cdFx0Ly9cblx0XHQvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyXG5cdFx0Ly8gICAgICAgICAgICBuICAgICAvICAgICAobi8vMikgXFwgICAgICAgICAgIChuJTIpXG5cdFx0Ly8gICAgIHwgMCAxIHwgICAgIHwgIHwgMCAxIHwgICAgIHwgICAgICB8IDAgMSB8XG5cdFx0Ly8gICAgIHwgMSAxIHwgID0gICBcXCB8IDEgMSB8ICAgIC8gICAuICAgfCAxIDEgfFxuXHRcdC8vXG5cdFx0Ly8gVGhlIG1hdHJpeCBpcyBlbmNvZGVkIGFzXG5cdFx0Ly9cblx0XHQvLyAgICAgfCB0IHUgfFxuXHRcdC8vICAgICB8IHYgdyB8XG5cblx0XHR2YXIgYSAsIGIgLCB0ICwgdSAsIHYgLCB3ICwgYTIgLCBiMiAsIHQyICwgdTIgLCB2MiAsIHcyIDtcblxuXHRcdGEgPSB6ZXJvKCApIDsgYiA9IG9uZSggKSA7XG5cdFx0dCA9IHplcm8oICkgOyB1ID0gb25lKCApIDsgdiA9IG9uZSggKSA7IHcgPSBvbmUoICkgO1xuXG5cdFx0d2hpbGUgKCB0cnVlICkge1xuXG5cdFx0XHRpZiAoIG4gJSAyID09PSAxICkge1xuXG5cdFx0XHRcdGEyID0gYWRkKCBtdWwoIGEgLCB0ICkgLCBtdWwoIGIgLCB1ICkgKSA7XG5cdFx0XHRcdGIyID0gYWRkKCBtdWwoIGEgLCB2ICkgLCBtdWwoIGIgLCB3ICkgKSA7XG5cblx0XHRcdFx0YSA9IGEyIDsgYiA9IGIyIDtcblxuXHRcdFx0XHRpZiAoIG4gPT09IDEgKSBicmVhayA7XG5cblx0XHRcdH1cblxuXG5cdFx0XHR0MiA9IGFkZCggbXVsKCB0ICwgdCApICwgbXVsKCB1ICwgdiApICkgO1xuXHRcdFx0dTIgPSBhZGQoIG11bCggdCAsIHUgKSAsIG11bCggdSAsIHcgKSApIDtcblx0XHRcdHYyID0gYWRkKCBtdWwoIHYgLCB0ICkgLCBtdWwoIHcgLCB2ICkgKSA7XG5cdFx0XHR3MiA9IGFkZCggbXVsKCB2ICwgdSApICwgbXVsKCB3ICwgdyApICkgO1xuXG5cdFx0XHR0ID0gdDIgOyB1ID0gdTIgOyB2ID0gdjIgOyB3ID0gdzIgO1xuXG5cdFx0XHRuID4+Pj0gMSA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gWyBhICwgYiBdIDtcblxuXHR9IDtcblxuXHRyZXR1cm4gbWF0cml4IDtcblxufVxuXG4iXX0=